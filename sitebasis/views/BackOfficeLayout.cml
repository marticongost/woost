<?xml version="1.0" encoding="utf-8"?>

<?py
from cocktail.translations import get_language, translations
from cocktail.html.ieconditionalcomment import IEConditionalComment
from sitebasis.controllers.backoffice.editstack import EditNode
?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class

    cms = None
    backoffice = None
    user = None
    sections = ()
    section = None
    edit_stack = None

    def get_page_title(self):
        return self.backoffice and self.backoffice.title

    def get_section_id(self, section):
        return section

    def get_section_label(self, section):
        return translate(section + "_section")

    def get_section_url(self, section):
        return self.cms.document_uri(section)
    ?>

    <?py
    self.add_resource("/resources/styles/backoffice.css")
    
    # TODO: Implement conditional comments for IE more generally
    self.add_head_element(IEConditionalComment(condition = "IE", children = [
        Element("link",
            rel = "Stylesheet",
            type = "text/css",
            href = "/resources/styles/backoffice_ie.css")
    ]))
    
    self.add_resource("/cocktail/scripts/jquery.js")    
    self.add_resource("/cocktail/scripts/jquery.hotkeys.js")
    self.add_resource("/cocktail/scripts/jquery.query.js")
    self.add_resource("/resources/scripts/BackOfficeLayout.js")
    self.add_resource("/cocktail/scripts/selectors.js")
    self.add_client_translation("BackOfficeLayout unchanged_message")
    ?>

    <link rel="icon" type="image/png" href="/resources/images/favicon.png"/>

    <py:ready>
        <?py
        self.page_title = self.get_page_title()

        if self.backoffice:
            for resource in self.backoffice.resources:
                self.add_resource(resource.uri)
        ?>
    </py:ready>

    <div py:id="header">

        <!-- Page title -->
        <h1>
            <py:ready>${self.page_title}</py:ready>
        </h1>

        <!-- Identity and logout -->
        <div py:id="identity" py:visible="@{self.user and not self.user.anonymous}">
            <py:ready py:if="element.visible">
                <strong>${translate(self.user)}</strong>
                <form method="post">
                    <button name="logout" type="submit">
                        ${translate("Logout")}
                    </button>
                </form>
            </py:ready>
        </div>

        <!-- UI language selector -->
		<!--<div py:id="ui_language_selector" class="selector">
            <div class="label">${translate("Language")}</div>
            <py:cocktail.html.LinkSelector
                class="selector_content"
                py:items="${translations.keys()}"
                py:value="${get_language()}"
                py:empty_option_displayed="${False}">
                <?py
                @refine(element)
                def get_entry_url(selector, language):
                    return self.cms.language.translate_uri(language)
                ?>
            </py:cocktail.html.LinkSelector>
		</div>-->
    </div>

    <ul py:id="edit_path" py:visible="@{self.edit_stack}">
        <py:ready py:if="self.edit_stack">
            <li>
                <a href="${self.cms.document_uri()}">${translate(self.backoffice)}</a>
            </li>
            <li py:for="step, stack_node in enumerate(self.edit_stack)">
                <img class="separator" src="/resources/images/path_separator.png"/>
                <a>
                    <?py
                    if isinstance(stack_node, EditNode):
                        if stack_node.item:
                            node_desc = translate(stack_node.item)
                            item_id = str(stack_node.item.id)
                        else:
                            node_desc = translate("creating", content_type = stack_node.content_type)
                            item_id = "new"

                        node_uri = self.cms.document_uri("content", item_id)
                    else:
                        node_desc = translate(stack_node.member)
                        node_uri = self.cms.document_uri("content")

                    element["href"] = node_uri + "?edit_stack=" + self.edit_stack.to_param(step)
                    element.append(node_desc)
                    ?>
                </a>
            </li>            
        </py:ready>
    </ul>

    <div py:id="navigation" py:visible="@{len(self.sections) > 1}">

        <a py:def="section_entry"
            py:args="section"
            href="${self.get_section_url(section)}">
            <?py
            section_id = self.get_section_id(section)
            element.section_id = section_id
            element.add_class(section_id + "_section")

            if section_id == self.get_section_id(self.section):
                element.add_class("selected")
            ?>
            ${self.get_section_label(section)}
        </a>

        <py:ready>
            <py:new py:element="self.create_section_entry(section)"
                py:for="section in self.sections">
                <?py
                setattr(self, "section_" + element.section_id, element)
                ?>
            </py:new>
        </py:ready>

    </div>

    <div py:id="body"/>

    <div py:id="footer"/>

</div>
