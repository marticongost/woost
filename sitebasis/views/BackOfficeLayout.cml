<?xml version="1.0" encoding="utf-8"?>

<?py
from cocktail.translations import get_language, translations
from cocktail.html.ieconditionalcomment import IEConditionalComment
from cocktail.schema import Collection
from sitebasis.controllers.backoffice.editstack import EditNode, RelationNode
?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class

    cms = None
    backoffice = None
    user = None
    edit_stack = None
    notifications = ()

    def get_page_title(self):
        return self.backoffice and self.backoffice.title
    ?>

    <?py
    self.add_resource("/resources/styles/backoffice.css")
    self.add_resource("/resources/scripts/BackOfficeLayout.js")
    
    # TODO: Implement conditional comments for IE more generally
    self.add_head_element(IEConditionalComment(condition = "IE", children = [
        Element("link",
            rel = "Stylesheet",
            type = "text/css",
            href = "/resources/styles/backoffice_ie.css")
    ]))
    
    self.add_head_element(
        Element("link",
            rel = "Stylesheet",
            type = "text/css",
            media = "print",
            href = "/resources/styles/print.css")
    )
    
    self.add_resource("/cocktail/scripts/jquery.js")    
    self.add_resource("/cocktail/scripts/jquery.hotkeys.js")
    self.add_resource("/cocktail/scripts/jquery.query.js")
    self.add_resource("/cocktail/scripts/selectors.js")
    self.add_client_translation("BackOfficeLayout unchanged_message")
    ?>

    <link rel="icon" type="image/png" href="/resources/images/favicon.png"/>

    <py:ready>
        <?py
        self.page_title = self.get_page_title()

        if self.backoffice:
            for resource in self.backoffice.page_resources:
                self.add_resource(resource.uri)
        ?>
    </py:ready>

    <div py:id="header">

        <!-- Page title -->
        <h1>
            <py:ready>${self.page_title}</py:ready>
        </h1>

        <!-- Identity and logout -->
        <div py:id="identity" py:visible="@{self.user and not self.user.anonymous}">
            <py:ready py:if="element.visible">
                <strong>${translate(self.user)}</strong>
                <form method="post">
                    <button name="logout" type="submit">
                        ${translate("Logout")}
                    </button>
                </form>
            </py:ready>
        </div>
    </div>

    <div py:id="navigation_bar" py:collapsible="${True}">
        <a py:id="back_link" href="@{self.cms.document_uri()}">
            ${translate("sitebasis.views.BackOfficeLayout stack root")}
        </a>
    </div>

    <div py:id="notification_box" py:collapsible="${True}">
        <py:ready>
            <div class="notification"
                py:if="self.notifications"
                py:for="message, category in self.notifications">
                <?py
                if category:
                    element.add_class(category)
                ?>
                ${message}
            </div>
        </py:ready>
    </div>

    <py:ready>
        <?py
        if self.edit_stack and len(self.edit_stack) > 1:

            node_container = None
            relation = None

            for node in self.edit_stack:
                
                is_relation_node = isinstance(node, RelationNode)

                # Only show relation nodes when they are at the top of the
                # stack (ie. when selecting related items)
                if is_relation_node:
                    relation = node.member
                    if node is not self.edit_stack[-1]:
                        continue
                
                # Nesting
                parent_container = node_container
                node_container = Element()
                node_container.add_class("stack_node")

                if parent_container is None:
                    node_container.place_before(self.body)
                    node_container.add_class("root")
                else:
                    parent_container.append(node_container)

                if node is self.edit_stack[-1]:
                    node_container.add_class("top")

                # Title
                node_label = Element()
                node_label.add_class("label")

                if relation:
                    node_label.append(
                        Element("span",
                            class_name = "relation",
                            children = [translate(relation)]
                        )
                    )
                    node_label.append(": ")
                    relation = None

                if is_relation_node:                
                    if isinstance(node.member, Collection):
                        node_desc = "afegir"
                    else:
                        node_desc = "seleccionar"
                else:
                    if node.item.is_inserted:
                        node_desc = translate(node.item)
                    else:
                        node_desc = translate("creating",
                            content_type = node.content_type
                        )
                
                node_label.append(
                    Element("span", class_name = "description", children = [node_desc])
                )

                node_container.append(node_label)

            node_container.append(self.body)
        ?>
    </py:ready>

    <div py:id="body"/>

    <div py:id="footer"/>

</div>
