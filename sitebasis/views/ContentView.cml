<?xml version="1.0" encoding="utf-8"?>

<?py
from cocktail.modeling import extend, call_base
from cocktail.iteration import is_empty
from cocktail.controllers.viewstate import view_state
from sitebasis.models import Item
from sitebasis.views.contenttypetree import ContentTypeTree
from sitebasis.controllers.backoffice.useractions import get_view_actions
?>

<py:cocktail.html.CollectionView
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py
    self.add_resource("/cocktail/scripts/jquery.js")
    self.add_resource("/resources/scripts/ContentView.js")    
    self.add_client_translation("sitebasis.views.ContentView advanced search title")
    self.add_client_translation("sitebasis.views.ContentView show advanced search")
    self.add_client_translation("sitebasis.views.ContentView close advanced search")
    self.add_client_translation("sitebasis.views.ContentView search button")
    ?>

    <?py-class
    collection_params = None
    available_content_views = ()
    visible_languages = ()
    root_content_type = Item
    edit_stack = None

    @classmethod
    def get_collection(cls, content_type, item = None, relation = None):
        if item:
            return item.get(relation)
        else:
            return None # default

    @classmethod
    def compatible_with(cls, content_type, item = None, relation = None):
        return True
    
    def _attach(self, controller):
        pass

    def _init_user_collection(self, user_collection):
        pass

    def create_toolbar_button(self, action):
        if action.id == "new":
            button = self.create_new_toolbar_button(action)
        else:
            button = CollectionView.create_toolbar_button(self, action.id)
            if action.frequent:
                button.insert(0, self.create_toolbar_button_image(action))

        button.set_client_param("minSelection", action.min)
        button.set_client_param("maxSelection", action.max)
        return button

    def create_toolbar_button_image(self, action):
        return Element("img",
        src = "/resources/images/"
                + action.id + "_small"
                #+ (action.id if action.frequent else action.id + "_small")
                + ".png")

    def fill_toolbar(self):

        has_additional_actions = False

        for action in get_view_actions(self, "toolbar", self.user_collection.type):
            if not action.min or self.visible_results:
                button = self.create_toolbar_button(action)
                
                if action.frequent:
                    container = self.frequent_actions_box
                else:
                    container = self.additional_actions_box
                    has_additional_actions = True

                container.append(button)

        if not has_additional_actions:
            self.additional_actions_selector.visible = False
    ?>

    <py:ready>
        <py:with py:element="self.collection_display"
            py:authorization_check="${self.cms.authorization.allows}" />

        <?py
        self.set_client_param("contentTypeFullName", self.user_collection.type.full_name)

        if self.user_collection.user_filters:
            user_filter = self.user_collection.user_filters[0]
            if user_filter.id == "global_search":                
                self.set_client_param("searchQuery", user_filter.value)
        ?>
    </py:ready>
    
    <py:block
        py:index="0">

        <!-- Content type selector -->
        <py:sitebasis.views.ContentTypeSelector
            py:id="content_type_selector"
            py:value="@{self.user_collection.type}"
            py:index="0"
            py:root="@{self.root_content_type}">

            <py:ready>
                <?py
                content_type = self.user_collection.type

                if content_type is self.root_content_type \
                and is_empty(content_type.derived_schemas()):
                    element.add_class("empty_selector")
                    #element.visible = False
                ?>
            </py:ready>

            <py:with py:def="tree"
                py:plural_labels="${True}"
                py:selection="${self.user_collection.type}">
                <?py
                @extend(tree)
                def create_entry(tree, content_type):
                    entry = call_base(content_type)
                    if content_type is self.user_collection.type:
                        entry.add_class("selected")
                    return entry

                @refine(tree)
                def filter_item(tree, content_type):
                    return (
                        ContentTypeTree.filter_item(tree, content_type)
                        and self.cms.authorization.allows(
                                target_type = content_type,
                                action = "read",
                                partial_match = True
                            )
                    )
                
                @refine(tree)
                def get_item_url(tree, content_type):
                    url = "?type=" + content_type.__name__
                    if self.edit_stack:
                        url += "&edit_stack=" + self.edit_stack.to_param()
                    return url
                ?>
            </py:with>

        </py:sitebasis.views.ContentTypeSelector>

        <!-- Content view selector -->
        <div py:id="content_view"
            class="toolbar_button">

            <span py:id="content_view_label">
                ${translate("sitebasis.views.ContentView label")}
            </span>

            <py:cocktail.html.LinkSelector
                py:id="content_view_selector"
                py:name="content_view">

                <?py
                @refine(element)
                def get_item_label(self, content_view):                    
                    return translate(content_view.content_view_id + " content view")
                
                @refine(element)
                def get_item_value(self, content_view):
                    return content_view.content_view_id
                ?>

                <py:with
                    py:def="entry_link" py:args="value, label"
                    title="${label}">
                    <?py element.empty() ?>
                    <img src="/resources/images/${value.lower()}contentview.png"/>
                </py:with>

            </py:cocktail.html.LinkSelector>

            <py:ready>
                <?py
                if self.available_content_views \
                and len(self.available_content_views) > 1:                    
                    self.content_view_selector.items = self.available_content_views
                    self.content_view_selector.value = self
                else:
                    self.content_view.visible = False
                ?>
            </py:ready>
        </div>

    </py:block>

    <!-- New item selector -->
    <div py:def="new_toolbar_button"
        py:args="action"
        class="selector toolbar_button new">
        <?py
        shortcut = translate("CollectionView new shortcut", default = "")
        if shortcut:
            element.set_client_param("shortcut", shortcut)
        ?>
        <span class="label">
            <py:new
                py:element="self.create_toolbar_button_image(action)"
                py:if="action.frequent"/>
            ${translate("Action new")}
        </span>
        <div class="selector_content">
            <py:sitebasis.views.ContentTypeTree
                py:id="new_item_selector"
                py:root="@{self.user_collection.type}"
                py:base_url="@{self.cms.document_uri('content', 'new')}">
        
                <?py
                @refine(element)
                def filter_item(new_item_selector, content_type):
                    return (
                        ContentTypeTree.filter_item(new_item_selector, content_type)
                        and content_type.instantiable
                        and self.cms.authorization.allows(
                                target_type = content_type,
                                action = "create",
                                partial_match = True
                            )
                    )

                @refine(element)
                def get_item_url(new_item_selector, content_type):
                    return new_item_selector.base_url + '?type=' + content_type.__name__
                ?>
            </py:sitebasis.views.ContentTypeTree>
        </div>
    </div>

    <py:with py:element="self.toolbar">
        <div py:id="frequent_actions_box"/>
        <div py:id="additional_actions_selector" class="selector toolbar_button">
            <span class="label">${translate("More actions")}</span>
            <div py:id="additional_actions_box" class="selector_content"/>
        </div>
    </py:with>

</py:cocktail.html.CollectionView>
