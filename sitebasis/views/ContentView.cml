<?xml version="1.0" encoding="utf-8"?>

<?py
from cocktail.modeling import extend, call_base
from cocktail.iteration import is_empty
from sitebasis.models import Item
from sitebasis.views.contenttypetree import ContentTypeTree
?>

<py:cocktail.html.CollectionView
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    collection_params = None
    available_content_views = ()
    visible_languages = ()
    root_content_type = Item
    edit_stack = None

    @classmethod
    def get_collection(cls, content_type, item = None, relation = None):
        if item:
            return item.get(relation)
        else:
            return None # default

    @classmethod
    def compatible_with(cls, content_type, item = None, relation = None):
        return True
    
    def _attach(self, controller):
        pass

    def _init_user_collection(self, user_collection):
        pass

    def create_toolbar_button(self, action):
        if action == "new":
            return self.create_new_toolbar_button()
        else:
            return CollectionView.create_toolbar_button(self, action)
    ?>

    <py:ready>
        <py:with py:element="self.collection_display"
            py:authorization_check="${self.cms.authorization.allows}" />
    </py:ready>

    <py:block
        py:index="0">

        <!-- Content type path -->
        <py:sitebasis.views.ContentTypePath
            py:id="content_type_path"
            py:value="@{self.user_collection.type}"
            py:index="0"
            py:root="@{self.root_content_type}">

            <py:ready>
                <?py
                content_type = self.user_collection.type

                if content_type is self.root_content_type \
                and is_empty(content_type.derived_schemas()):
                    element.visible = False
                ?>
            </py:ready>

            <py:with py:def="selector">
                <py:with py:def="tree" py:plural_labels="${True}">
                    <?py
                    @refine(tree)
                    def filter_item(tree, content_type):
                        return (
                            ContentTypeTree.filter_item(tree, content_type)
                            and self.cms.authorization.allows(
                                    target_type = content_type,
                                    action = "read",
                                    partial_match = True
                                )
                        )
                    
                    @refine(tree)
                    def get_item_url(tree, content_type):
                        url = "?type=" + content_type.__name__
                        if self.edit_stack:
                            url += "&edit_stack=" + self.edit_stack.to_param()
                        return url
                    ?>
                </py:with>
            </py:with>

        </py:sitebasis.views.ContentTypePath>

        <!-- Content view selector -->
        <div py:id="content_view"
            class="toolbar_button">

            <py:cocktail.html.LinkSelector
                py:id="content_view_selector"
                py:name="content_view">

                <?py
                @refine(element)
                def get_item_label(self, content_view):                    
                    return translate(content_view.content_view_id + " content view")
                
                @refine(element)
                def get_item_value(self, content_view):
                    return content_view.content_view_id
                ?>

                <py:with
                    py:def="entry_link" py:args="value, label"
                    title="${label}">
                    <?py element.empty() ?>
                    <img src="/resources/images/${value.lower()}contentview.png"/>
                </py:with>

            </py:cocktail.html.LinkSelector>

            <py:ready>
                <?py
                if self.available_content_views \
                and len(self.available_content_views) > 1:                    
                    self.content_view_selector.items = self.available_content_views
                    self.content_view_selector.value = self
                else:
                    self.content_view.visible = False
                ?>
            </py:ready>
        </div>

    </py:block>

    <!-- New item selector -->
    <div py:def="new_toolbar_button"
        class="selector toolbar_button new">
        <?py
        shortcut = translate("CollectionView new shortcut", default = "")
        if shortcut:
            element.set_client_param("shortcut", shortcut)
        ?>
        <span class="label">
            <img src="${self.cms.application_uri('resources', 'images', 'new.png')}"/>
            ${translate("new")}
        </span>
        <div class="selector_content">
            <py:sitebasis.views.ContentTypeTree
                py:id="new_item_selector"
                py:root="@{self.user_collection.type}"
                py:base_url="@{self.cms.document_uri('content', 'new')}">
        
                <?py
                @refine(element)
                def filter_item(new_item_selector, content_type):
                    return (
                        ContentTypeTree.filter_item(new_item_selector, content_type)
                        and content_type.instantiable
                        and self.cms.authorization.allows(
                                target_type = content_type,
                                action = "create",
                                partial_match = True
                            )
                    )

                @refine(element)
                def get_item_url(new_item_selector, content_type):
                    return new_item_selector.base_url + '?type=' + content_type.__name__
                ?>
            </py:sitebasis.views.ContentTypeTree>
        </div>
    </div>

</py:cocktail.html.CollectionView>
