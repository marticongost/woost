<?xml version="1.0" encoding="utf-8"?>

<?py
from itertools import chain
from cocktail.html.shortcuts import set_translated_shortcut
from sitebasis.controllers.backoffice.useractions import (
    get_view_actions, get_view_actions_context
)
?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    action_context = None
    button_images = True
    hide_when_empty = True
    group_additional_actions = True
    min_frequent_actions = 1
    min_additional_actions = 2
    content_type = None
    ?>

    <button
        py:def="action_button"
        type="submit"
        py:args="action, extra"
        name="action"
        value="${action.id}"
        class="${action.id}_action">
        <py:new
            py:element="self.create_action_image(action, extra)"
            py:if="self.button_images and not extra"/>
        ${translate("Action " + action.id)}
        <?py
        set_translated_shortcut(element, "action " + action.id)
        ?>
    </button>

    <img
        py:def="action_image"
        py:args="action, extra"
        src="/resources/images/${action.id}_small.png"/>

    <div py:def="additional_actions_selector" class="selector">
        <span class="label">${translate("sitebasis.views.ActionBar Additional actions")}</span>
        <div py:id="additional_actions_box" class="selector_content"/>
    </div>

    <py:ready>
        <?py
        if not self.action_context:
            raise ValueError("sitebasis.views.ActionBar needs an action_context attribute")

        if not self.content_type:
            raise ValueError("sitebasis.views.ActionBar needs a content_type attribute")

        context = get_view_actions_context(self)
        
        actions = get_view_actions(
            context | set([self.action_context]),
            self.content_type)

        additional_actions = get_view_actions(
            context | set([self.action_context + "_extra"]),
            self.content_type)

        groupped = self.group_additional_actions

        # Avoid superflous groupping of additional actions
        if groupped:
            if self.min_frequent_actions:
                actions = list(actions)
                if len(actions) < self.min_frequent_actions:
                    groupped = False

            if self.min_additional_actions:
                additional_actions = list(additional_actions)
                if len(additional_actions) < self.min_additional_actions:
                    groupped = False

        if not groupped:
            actions = chain(actions, additional_actions)

        has_actions = False

        # Frequent actions
        for action in actions:
            action_button = self.create_action_button(action, False)
            self.append(action_button)
            has_actions = True

        # Additional actions dropdown
        if groupped:
            selector = self.create_additional_actions_selector()
            self.append(selector)

            for action in additional_actions:
                action_button = self.create_action_button(action, True)
                self.additional_actions_box.append(action_button)
                has_actions = True

        # Automatically hide an empty toolbar
        if self.hide_when_empty and not has_actions:
            self.visible = False
        ?>
    </py:ready>
</div>
