<?xml version="1.0" encoding="utf-8"?>
<?py
from cocktail.language import get_content_language
from cocktail.html import StyleSheet
from sitebasis.models import Site
?>

<py:block
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    document = None
    user = None
    ?>

    <py:ready>
        <?py
        document = self.document

        if document:

            site = Site.main
            content_language = get_content_language()

            # Page title
            self.page_title = document.title

            # Meta tags
            self.set_meta("Content-Language", content_language)
            self.set_meta("description", document.description)
            
            keywords = ((site.keywords or "") + ", " + (document.keywords or "")).strip(", ")
            if keywords:
                self.set_meta("keywords", keywords)
            
            # Links
            self.add_head_element(
                Element("link", rel = "start", title = site.home.title, href = "/")
            )

            # Alternate languages
            for language in document.translations:
                if language != content_language and document.get("enabled", language):
                    self.add_head_element(
                        Element("link",
                            rel = "alternate",
                            title = translations("sitebasis.views.BaseView alternate language link", lang = language),
                            href = self.cms.language.translate_uri(language = language),
                            lang = language,
                            hreflang = language
                        )
                    )

            # Shortcut icon
            icon = site.icon
            if icon:                
                self.add_head_element(
                    Element("link",
                        rel = "Shortcut Icon",
                        type = icon.mime_type,
                        href = icon.uri
                    )
                )

            # Inherited resources
            ancestry = reversed(list(document.ascend_documents(include_self = True)))
            for ancestor in ancestry:
                for resource in ancestor.branch_resources:
                    self.add_resource(resource.uri)

            # Page resources
            for resource in document.page_resources:
                self.add_resource(resource.uri)
        
            # User defined styles for user content
            self.add_resource(StyleSheet("/user_styles/"))
        ?>
    </py:ready>

    <py:block py:id="content">
        <py:ready py:if="self.document">
            ${self.document.body}
        </py:ready>
    </py:block>

</py:block>
