<?xml version="1.0" encoding="utf-8"?>

<?py
from cocktail.schema import Collection
?>

<py:sitebasis.views.BackOfficeLayout
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <py:ready>
        <?py
        self.set_client_param("edit_stack", self.edit_stack.to_param())
        ?>
    </py:ready>

    <?py
    self.add_resource("/cocktail/scripts/jquery.js")
    self.add_resource("/cocktail/scripts/jquery.cookie.js")
    self.add_resource("/resources/scripts/backoffice_item.js")
    ?>

    <?py-class
    sections = ["fields"]
    edited_item = None
    edited_content_type = None
    collections = ()
    edit_stack = None

    def get_page_title(self):
        if self.edited_item \
        and not (self.edited_item.is_draft and self.edited_item.draft_source is None):
            return translate("editing", item = self.edited_item)
        else:
            return translate("creating", content_type = self.edited_content_type)

    def get_section_id(self, section):
        if isinstance(section, Collection):
            return section.name
        else:
            return section

    def get_section_label(self, section):
        if isinstance(section, Collection):
            return translate(section)
        else:
            return translate(self.edited_content_type.name)
    ?>

    <!-- Move the navigation bar inside the central content -->
    <py:with
        py:element="self.navigation"
        py:parent="self.body"
        py:position="0"/>

    <button
        py:def="section_entry"
        py:args="section"
        type="submit"
        name="section">
        <?py
        section_id = self.get_section_id(section)
        element.section_id = section_id
        element["value"] = section_id
        element.add_class(section_id + "_section")

        if section_id == self.get_section_id(self.section):
            element.add_class("selected")

        if self.edited_item and (
            (section_id == "fields" and self.differences)
            or (isinstance(section, Collection) and self.edit_stack[-1].collection_has_changes(section))
        ):
            element.add_class("changed")
        ?>
        ${self.get_section_label(section)}
    </button>


    <!-- Turn the central content into a form -->
    <py:with
        py:element="self.body"
        py:tag="form"
        method="post">

        <!-- Default button (hidden) -->
        <button
            py:index="0"
            type="submit"
            name="action" value="save"
            style="display: none"/>

        <div py:id="edit_form_frame">

            <div py:id="success" py:visible="@{self.saved}">
                ${translate("sitebasis.views.BackOfficeItemView Changes saved")}
            </div>

            <ul py:id="error_box"
                py:visible="@{self.submitted and self.form_errors}">
                <py:ready py:if="element.visible">
                    <li py:for="error in self.form_errors">
                        ${translate(error)}
                    </li>
                </py:ready>
            </ul>

            <!-- Draft remark -->
            <div
                py:id="draft_box"
                py:visible="@{self.edited_item and self.edited_item.is_draft}"
                class="draft">
                <py:ready py:if="self.draft_box.visible">
                    <?py
                    if self.edited_item.draft_source:
                        element.append(
                            translate(
                                "Editing draft copy",
                                location = self.backoffice.get_edit_uri(
                                    self.edited_item.draft_source
                                )
                            )
                        )
                    else:
                        element.append(translate("Editing draft"))
                    ?>
                </py:ready>
            </div>
        </div>

        <div py:id="buttons">

            <py:ready>
                <?py
                # Hide collections
                for member in self.form_schema.members().itervalues():
                    if isinstance(member, Collection):
                        element.set_field_displayed(member, False)
                ?>
                <button
                    py:id="close_button"
                    name="action"
                    type="submit"
                    value="close">
                    ${translate("Close")}
                </button>

                <button
                    py:id="save_draft_button"
                    py:visible="${not (self.edited_item and self.edited_item.is_draft)}"
                    name="action"
                    type="submit"
                    value="make_draft">
                    ${translate("Save draft")}
                </button>

                <button
                    py:id="save_button"
                    name="action"
                    type="submit"
                    value="save">
                    ${translate("Save")}
                </button>

                <button
                    py:id="confirm_draft_button"
                    py:visible="${self.edited_item and self.edited_item.is_draft}"
                    name="action"
                    type="submit"
                    value="confirm_draft">
                    ${translate("Confirm draft")}
                </button>
            </py:ready>
        </div>

        <div
            py:id="more_actions"
            class="selector">

            <div class="selector_content">
                <a
                    py:id="delete_button"
                    py:visible="@{self.edited_item is not None}">
                    <py:ready>
                        <?py
                        if self.edited_item:
                            element["href"] = self.cms.document_uri("delete") \
                                + "?selection=" + str(self.edited_item.id)
                        else:
                            element.visible = False
                        ?>
                    </py:ready>
                    ${translate("delete")}
                </a>
                <a py:id="history_button">
                    <py:ready>
                        <?py
                        if self.edited_item:
                            element["href"] = self.cms.document_uri("history") \
                                + "?item=" + str(self.edited_item.id)
                        else:
                            element.visible = False
                        ?>
                    </py:ready>
                    ${translate("history")}
                </a>
                <button
                    py:id="differences_button"
                    py:visible="@{self.edited_item}"
                    name="section"
                    type="submit"
                    value="differences">
                    ${translate("Show differences")}
                </button>
                <button
                    py:id="preview_button"
                    name="section"
                    type="submit"
                    value="preview">
                    ${translate("Preview")}
                </button>
            </div>
            <span class="label">${translate("More actions")}</span>
        </div>
    </py:with>

    <py:ready>

        <!-- Add a dedicated section for each collection -->
        <?py
        self.sections = list(self.sections)

        for collection in self.collections:
            self.sections.append(collection)
        ?>

    </py:ready>

</py:sitebasis.views.BackOfficeLayout>
