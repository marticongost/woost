<?xml version="1.0" encoding="utf-8"?>

<?py
from cocktail.schema import Collection
from sitebasis.controllers.backoffice.useractions import get_view_actions
?>

<py:sitebasis.views.BackOfficeLayout
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <py:ready>
        <?py
        self.set_client_param("edit_stack", self.edit_stack.to_param())
        ?>
    </py:ready>

    <?py
    self.add_resource("/cocktail/scripts/jquery.js")
    self.add_resource("/cocktail/scripts/jquery.cookie.js")
    self.add_resource("/resources/scripts/backoffice_item.js")
    ?>

    <?py-class
    sections = ["fields"]
    edited_item = None
    edited_content_type = None
    collections = ()
    edit_stack = None
    errors = ()

    def get_section_id(self, section):
        if isinstance(section, Collection):
            return section.name
        else:
            return section

    def get_section_label(self, section):
        if isinstance(section, Collection):
            return translate(section)
        else:
            return translate(self.edited_content_type.name)
    ?>

    <!--<h2 py:parent="self.body" py:position="0">
        <py:ready>
            <?py
            if self.edited_item \
            and not (self.edited_item.is_draft and self.edited_item.draft_source is None):
                context_desc = translate("editing", item = self.edited_item)
            else:
                context_desc = translate("creating", content_type = self.edited_content_type)
            ?>
            ${context_desc}
        </py:ready>
    </h2>-->

    <!-- Tabs -->
    <div py:id="navigation"
        py:parent="self.body"
        py:position="0">
        
        <button
            py:def="section_entry"
            py:args="section"
            type="submit"
            name="section">
            <?py
            section_id = self.get_section_id(section)
            element.section_id = section_id
            element["value"] = section_id
            element.add_class(section_id + "_section")

            if section_id == self.get_section_id(self.section):
                element.add_class("selected")

            if self.edited_item and (
                (section_id == "fields" and self.differences)
                or (isinstance(section, Collection) and self.edit_stack[-1].collection_has_changes(section))
            ):
                element.add_class("changed")
            ?>
            ${self.get_section_label(section)}
        </button>

        <py:ready>
             <py:new py:element="self.create_section_entry(section)"
                 py:for="section in self.sections">
                 <?py
                 setattr(self, "section_" + element.section_id, element)
                 ?>
             </py:new>
         </py:ready>
    </div>
    
    <!-- Turn the central content into a form -->
    <py:with
        py:element="self.body"
        py:tag="form"
        method="post">

        <!-- Default button (hidden) -->
        <button
            py:index="0"
            type="submit"
            name="item_action" value="save"
            style="display: none"/>

        <div py:id="edit_form_frame">

            <div py:id="success" py:visible="@{self.saved}">
                ${translate("sitebasis.views.BackOfficeItemView Changes saved")}
            </div>

            <ul py:id="error_box"
                py:visible="@{self.submitted and self.errors}">
                <py:ready py:if="element.visible">
                    <li py:for="error in self.errors">
                        ${translate(error)}
                    </li>
                </py:ready>
            </ul>

            <!-- Draft remark -->
            <div
                py:id="draft_box"
                py:visible="@{self.edited_item and self.edited_item.is_draft}"
                class="draft">
                <py:ready py:if="self.draft_box.visible">
                    <?py
                    if self.edited_item.draft_source:
                        element.append(
                            translate(
                                "Editing draft copy",
                                location = self.backoffice.get_edit_uri(
                                    self.edited_item.draft_source
                                )
                            )
                        )
                    else:
                        element.append(translate("Editing draft"))
                    ?>
                </py:ready>
            </div>
        </div>

        <div py:id="buttons">
            <button
                py:def="button"
                py:args="action"
                type="submit"
                name="item_action"
                value="${action.id}">
                ${translate("Action " + action.id)}
            </button>
            <div py:id="frequent_actions_box">
                <py:ready>
                    <py:new
                        py:element="self.create_button(action)"
                        py:for="action in get_view_actions(self, 'item_buttons', self.edited_content_type)"/>
                </py:ready>
            </div>
            <div py:id="additional_actions_selector" class="selector">
                <span class="label">${translate("More actions")}</span>
                <div py:id="additional_actions_box" class="selector_content">
                    <py:ready>
                        <py:new
                            py:element="self.create_button(action)"
                            py:for="action in get_view_actions(self, 'item_buttons_extra', self.edited_content_type)"/>
                    </py:ready>
                </div>
            </div>
        </div>
    </py:with>

    <py:ready>

        <!-- Add a dedicated section for each collection -->
        <?py
        self.sections = list(self.sections)

        for collection in self.collections:
            self.sections.append(collection)
        ?>

    </py:ready>

</py:sitebasis.views.BackOfficeLayout>
