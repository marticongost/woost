<?xml version="1.0" encoding="utf-8"?>

<?py
from cocktail.iteration import is_empty
from sitebasis.models import Item
?>

<py:cocktail.html.CollectionView
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    collection_params = None
    available_content_views = ()
    visible_languages = ()
    root_content_type = Item

    def create_toolbar_button(self, action):
        if action == "new":
            return self.create_new_toolbar_button()
        else:
            button = CollectionView.create_toolbar_button(self, action)
            button["value"] = action
            return button
    ?>

    <!-- Content type path -->
    <py:sitebasis.views.ContentTypePath
        py:id="content_type_path"
        py:value="@{self.user_collection.entity_type}"
        py:index="0"
        py:root="@{self.root_content_type}">

        <py:ready>
            <?py
            entity = self.user_collection.entity_type

            if entity is self.root_content_type \
            and is_empty(entity.derived_entities()):
                element.visible = False
            ?>
        </py:ready>

        <py:with py:def="selector">
            <py:with py:def="tree" py:plural_labels="${True}">
                <py:with py:def="label" py:args="item"
                    py:tag="a"
                    href="?type=${item.__name__}"/>
            </py:with>
        </py:with>

    </py:sitebasis.views.ContentTypePath>

    <!-- New item selector -->
    <div py:def="new_toolbar_button"
        class="selector toolbar_button new">
        <span class="label">
            <img src="${self.cms.uri('resources', 'images', 'new.png')}"/>
            ${translate("new")}
        </span>
        <div class="selector_content">
            <py:sitebasis.views.ContentTypeTree
                py:id="new_item_selector"
                py:root="@{self.user_collection.entity_type}"
                py:base_url="@{self.cms.uri(self.backoffice.path, 'content', 'new')}">

                <py:with py:def="label" py:args="content_type"
                    py:tag="a"
                    href="${self.base_url + '?type=' + content_type.__name__}"/>

            </py:sitebasis.views.ContentTypeTree>
        </div>
    </div>

    <!-- Content view selector -->
    <py:with
        py:element="self.settings_box">

        <div py:id="content_view" class="toolbar_button selector">
            <span class="label">${translate("View as")}</span>
            <div class="selector_content">
                <py:cocktail.html.LinkSelector
                    py:id="content_view_selector"
                    py:name="content_view">
                    <?py
                    @refine(element)
                    def get_item_label(self, content_view):
                        return translate(content_view.content_view_id + " content view")
                    
                    @refine(element)
                    def get_item_value(self, content_view):
                        return content_view.content_view_id
                    ?>
                </py:cocktail.html.LinkSelector>
            </div>

            <py:ready>
                <?py
                if self.available_content_views \
                and len(self.available_content_views) > 1:                    
                    self.content_view_selector.items = self.available_content_views
                    self.content_view_selector.value = self
                else:
                    self.content_view.visible = False
                ?>
            </py:ready>
        </div>

    </py:with>

</py:cocktail.html.CollectionView>
