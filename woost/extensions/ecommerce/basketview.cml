<?xml version="1.0" encoding="utf-8"?>
<?py
from decimal import Decimal
from cocktail.translations import format_money
from cocktail import schema
from cocktail.html import Element, Content
from woost.extensions.ecommerce.ecommerceproduct import ECommerceProduct
from woost.extensions.ecommerce.basket import Basket
from woost.extensions.ecommerce.bill import OrderBill
?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    order = None
    bill = None

    order_schema = schema.Schema("woost.extensions.ecommerce.BasketView.order_schema", members = [
        schema.Reference("product", type = ECommerceProduct),
        schema.Integer("quantity"),
        schema.Decimal("price"),
        schema.Decimal("subtotal"),
        schema.Decimal("taxes"),
        schema.Decimal("total"),
        schema.Member("actions")
    ])
    currency = u"EUR"
    editable = False
    embeded = False
    link_products = True
    show_images = True
    image_factory = "ecommerce_basket_thumbnail"

    apply_pricing = True
    apply_shipping = True
    apply_taxes = True

    forms = None
    form_errors = ()

    def format_amount(self, amount):
        return format_money(amount, self.currency)

    def create_subtotal_cell(self, member):
        factory = getattr(self, "create_%s_subtotal_cell" % member.name, None)
        cell = Element("td") if factory is None else factory()
        cell.add_class("%s_column" % member.name)
        return cell

    def create_pricing_cell(self, member):
        factory = getattr(self, "create_%s_pricing_cell" % member.name, None)
        cell = Element("td") if factory is None else factory()
        cell.add_class("%s_column" % member.name)
        return cell

    def create_shipping_cell(self, member):
        factory = getattr(self, "create_%s_shipping_cell" % member.name, None)
        cell = Element("td") if factory is None else factory()
        cell.add_class("%s_column" % member.name)
        return cell

    def create_taxes_cell(self, member):
        factory = getattr(self, "create_%s_taxes_cell" % member.name, None)
        cell = Element("td") if factory is None else factory()
        cell.add_class("%s_column" % member.name)
        return cell

    def create_footer_cell(self, member):
        factory = getattr(self, "create_%s_footer_cell" % member.name, None)
        cell = Element("td") if factory is None else factory()
        cell.add_class("%s_column" % member.name)
        return cell

    def get_purchase_label(self, purchase):
        return translations(purchase.product)

    def get_displayed_concepts(self):

        nodes = []

        if self.show_subtotal:
            nodes.append(self.bill.pricing.base)

        nodes.extend(
            node
            for node in self.bill.pricing.list_concept_nodes()
            if not node.concept.hidden
        )

        nodes.extend(
            node
            for node in self.bill.shipping.list_concept_nodes()
            if not node.concept.hidden
        )

        nodes.extend(
            node
            for node in self.bill.taxes.list_concept_nodes()
            if not node.concept.hidden
        )

        return nodes

    def get_concept_label(self, bill_node):
        if bill_node is self.bill.pricing.base:
            return view_translations("subtotal")
        else:
            return bill_node.concept.get_title(bill_node.bill.item)

    def get_concept_amount(self, bill_node):
        if bill_node.section == "pricing" and bill_node is not self.bill.pricing.base:
            return (bill_node.base_total, bill_node.total)
        else:
            return bill_node.total_differential
    ?>

    <py:ready>
        <?py
        if self.order is None:
            self.order = Basket.get()

        if self.bill is None:
            self.bill = self.order.bill or OrderBill(
                self.order,
                pricing = None if self.apply_pricing else (),
                shipping = None if self.apply_shipping else (),
                taxes = None if self.apply_taxes else ()
            )

        self.show_subtotal = (
               (self.apply_shipping and self.bill.shipping.concept)
            or (self.apply_taxes and self.bill.taxes.concept)
        )

        if self.editable:

            self.add_resource("cocktail://scripts/form.js")

            if not self.embeded:
                self.tag = "form"
                self["method"] = "post"

            self.add_class("editable")

            default_button = Element("button",
                type = "submit",
                name = "action",
                value = "set_quantities"
            )
            default_button.set_style("visibility", "hidden")
            default_button.set_style("position", "absolute")
            self.insert(0, default_button)
        else:
            self.add_class("not_editable")
            self.basket_table.set_member_displayed("actions", False)
        ?>
    </py:ready>

    <div py:id="empty_basket_notice" py:visible="@{not self.order.purchases}">
        ${translations("woost.extensions.ecommerce.BasketView.empty_basket_notice")}
    </div>

    <py:cocktail.html.ErrorBox
        py:id="errors"
        py:errors="@{self.form_errors}"/>

    <py:cocktail.html.Table
        py:id="basket_table"
        py:schema="@{self.order_schema}"
        py:data="@{self.order.purchases}"
        py:visible="@{bool(self.order.purchases)}">

        <py:binding>
            <?py
            if not self.apply_taxes or not any(
                purchase_bill.taxes.concept
                for purchase_bill in self.bill.purchases.itervalues()
            ):
                element.set_member_displayed("taxes", False)
                element.set_member_displayed("subtotal", False)
            ?>
        </py:binding>

        <div py:def="product_display" py:args="purchase, member, value, **context">

            <py:woost.views.Link
                py:local_id="product_link"
                py:inactive_behavior="${element.BECOME_DIV}">
                <?py
                if self.link_products:
                    element.value = purchase.product
                ?>

                <py:woost.views.Image
                    py:local_id="product_image"
                    py:image="${purchase.product.image}"
                    py:image_factory="${self.image_factory}">
                    <?py
                    if not self.show_images:
                        element.visible = False
                    ?>
                </py:woost.views.Image>

                <div py:local_id="product_label">
                    ${self.get_purchase_label(purchase)}
                </div>

                <ul py:local_id="purchase_options" py:collapsible="${True}">
                    <py:new
                        py:element="self.create_purchase_option(purchase, option)"
                        py:for="option in purchase.get_options()"
                        py:where="option is not purchase.__class__.quantity"/>
                </ul>

            </py:woost.views.Link>
        </div>

        <?py
        @extend(basket_table)
        def create_quantity_display(basket_table, purchase, member, value, **context):
            if not self.editable:
                return Content(str(purchase.quantity))
            else:
                display = loader.new("cocktail.html.TextBox")
                display["type"] = "number"
                display["min"] = 1
                display.value = purchase.quantity
                return display
        ?>

        <div py:def="actions_display" py:args="purchase, member, value, **context">
            <button
                py:local_id="delete_purchase_button"
                type="submit"
                name="delete_purchase"
                value="${purchase.id}">
                ${translations("woost.extensions.ecommerce.BasketView.delete_purchase_button")}
            </button>
        </div>

        <div py:def="price_display" py:args="purchase, member, value, **context">
            ${self.format_amount(self.bill.purchases[purchase].pricing.cost)}
        </div>

        <div py:def="subtotal_display" py:args="purchase, member, value, **context">
            ${self.format_amount(self.bill.purchases[purchase].pricing.total)}
        </div>

        <div py:def="taxes_display" py:args="purchase, member, value, **context">
            <ul>
                <li
                    py:for="tax in self.bill.purchases[purchase].taxes.list_concepts()"
                    py:where="not tax.hidden">
                    ${tax.get_title(purchase)}
                </li>
            </ul>
        </div>

        <div py:def="total_display" py:args="purchase, member, value, **context">
            ${self.format_amount(self.bill.purchases[purchase].total)}
        </div>

        <tbody py:id="concept_rows" py:after="basket_table.body">

            <py:ready>
                <?py
                concepts = self.get_displayed_concepts()
                if not concepts:
                    element.visible = False
                ?>
                <py:new
                    py:element="self.create_concept_row(concept)"
                    py:for="concept in concepts"/>
            </py:ready>

        </tbody>

        <tfoot py:id="basket_table_footer">
            <tr py:id="basket_table_footer_row">
                <py:ready>
                    <py:new
                        py:element="self.create_footer_cell(member)"
                        py:for="member in self.basket_table.displayed_members"/>
                </py:ready>
            </tr>
        </tfoot>

    </py:cocktail.html.Table>

    <li py:def="purchase_option" py:args="purchase, option">
        <?py
        element.add_class("%s_purchase_option" % option.name)
        ?>
        <span py:local_id="purchase_option_label">${translations(option)}:</span>
        <span py:local_id="purchase_option_value">${option.translate_value(purchase.get(option))}</span>
    </li>

    <tr py:def="concept_row" py:args="bill_node">
        <?py
        element["data-woost-ecommerce-concept-type"] = \
            "subtotal" if bill_node is self.bill.pricing.base else bill_node.section
        ?>
        <py:new py:element="self.create_concept_label(bill_node)"/>
        <py:new py:element="self.create_concept_amount(bill_node)"/>
    </tr>

    <th py:def="concept_label" py:args="bill_node">
        ${self.get_concept_label(bill_node)}
    </th>

    <td
        py:def="concept_amount" py:args="bill_node"
        colspan="${len(list(self.basket_table.displayed_members)) - 1}">
        <?py
        amount = self.get_concept_amount(bill_node)
        if isinstance(amount, tuple):
            element.append(self.create_cost_override(*amount))
        else:
            element.append(self.format_amount(amount))
        ?>
    </td>

    <span py:def="cost_override" py:args="base, override">
        <span py:local_id="base_label">${self.format_amount(base)}</span>
        <span py:local_id="override_label">${self.format_amount(override)}</span>
    </span>

    <td py:def="actions_footer_cell">
        <button
            py:local_id="empty_basket_button"
            type="submit"
            name="action"
            value="empty_basket">
            ${translations("woost.extensions.ecommerce.BasketView.empty_basket_button")}
        </button>
    </td>

    <td py:def="quantity_footer_cell">
        <button
            py:local_id="set_quantities_button"
            type="submit"
            name="action"
            value="set_quantities"
            py:visible="${self.editable}">
            ${translations("woost.extensions.ecommerce.BasketView.set_quantities_button")}
        </button>
    </td>

    <td py:def="total_footer_cell">
        @{self.format_amount(self.bill.total)}
    </td>

</div>

