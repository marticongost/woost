<?xml version="1.0" encoding="utf-8"?>
<?py
from decimal import Decimal
?>

<table
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates"
    cellpadding="0"
    cellspacing="0"
    border="0">

    <?py-class
    text = None
    link = None
    link_style = None
    image = None
    image_width_factors = {
        "one_third": Decimal("0.3"),
        "one_half": Decimal("0.5")
    }
    image_spacing = None
    heading_position = None
    _heading = None

    def insert_heading(self, heading):
        self._heading = heading

    def get_image_column_width(self):

        image_size = self.content_image_size or "one_third"

        if image_size == "original":
            return None

        image_width_factor = self.image_width_factors[image_size]
        image_spacing = self.image_spacing * self.base_spacing
        width = self.width - image_spacing

        if self["cellspacing"]:
            width -= int(self["cellspacing"]) * 2

        if self["cellpadding"]:
            width -= int(self["cellpadding"]) * 2

        return width * image_width_factor
    ?>

    <py:ready>
        <?py
        layout = None
        has_text = self.text or self._heading

        if has_text and self.image:
            layout = self.content_layout or "image_top"
        elif has_text:
            layout = "text_only"
        elif self.image:
            layout = "image_only"

        if self.image:
            if self.content_image_size == "original":
                self.image_factory = None
            elif self.is_single_column and layout in ("image_top", "image_only"):
                self.image_factory = "newsletter_single_column"
            else:
                self.image_factory = "newsletter_multi_column"

        if self.image_spacing is None:
            self.image_spacing = 2

        if self.link_style is None:
            self.link_style = "minimal"

        if self.heading_position is None:
            self.heading_position = "top"
        
        self.add_class("heading_position_" + self.heading_position)

        if self._heading:
            self.add_class("with_heading")
            link = self.create_content_link()
            for child in self._heading.children:
                link.append(child)
            self._heading.append(link)
        else:
            self.add_class("without_heading")

        if layout:
            layout_factory = getattr(self, "create_" + layout + "_layout")
            self.content_cell.append(layout_factory())
        else:
            self.visible = False
        ?>
    </py:ready>

    <tr py:id="heading_row" py:visible="@{self._heading and self.heading_position == 'top'}">
        <td py:id="heading_cell">
            <py:ready>
                <?py
                element.append(self._heading)
                ?>
            </py:ready>
        </td>
    </tr>

    <tr py:id="content_row">
        <td py:id="content_cell"/>
    </tr>
    
    <a py:def="content_link">
        <?py
        if self.link:
            element["target"] = "_blank"
            element["href"] = self.link.get_uri(host = "!")
        else:
            element.tag = None
        ?>
    </a>

    <py:new py:def="content_image" py:element="self.create_content_link()">
        <py:woost.views.Image
            py:local_id="image"
            py:image="${self.image}"
            py:image_factory="${self.image_factory}"
            width="${self.width}"/>
    </py:new>

    <div py:def="content_text">
        <?py
        if self._heading and self.heading_position == "inside":
            element.append(self._heading)

        if self.text:
            if self.link_style == "linked_text":
                link = self.create_content_link()
                link.append(self.text)
                element.append(link)
            else:
                element.append(self.text)
        ?>
        <py:new
            py:element="self.create_explicit_link()"
            py:local_id="explicit_link"
            py:if="self.link and self.link_style == 'explicit_link'"/>
    </div>

    <table py:def="explicit_link" border="0" cellpadding="0" cellspacing="0">
        <tr>
            <td>
                <py:new py:element="self.create_content_link()">
                    ${translations("woost.extensions.newsletters.NewsletterContentView.explicit_link")}
                </py:new>
            </td>
        </tr>
    </table>

    <!-- Layouts -->
    <py:new py:def="text_only_layout" py:element="self.create_content_text()"/>

    <py:new py:def="image_only_layout" py:element="self.create_content_image()"/>

    <table
        py:def="image_right_layout"
        cellpadding="0"
        cellspacing="0"
        border="0">
        <tr>
            <?py
            image_column_width = self.get_image_column_width()
            ?>
            <td py:local_id="text_cell">
                <py:new py:element="self.create_content_text()"/>
            </td>
            <td py:local_id="padding" width="${self.image_spacing * self.base_spacing}"/>
            <td py:local_id="image_cell" width="${image_column_width}">
                <py:new py:element="self.create_content_image()">
                    <?py
                    element.image["width"] = image_column_width
                    ?>
                </py:new>
            </td>
        </tr>
    </table>
    
    <table
        py:def="image_left_layout"
        cellpadding="0"
        cellspacing="0"
        border="0">
        <tr>
            <?py
            image_column_width = self.get_image_column_width()
            ?>
            <td py:local_id="image_cell" width="${image_column_width}">
                <py:new py:element="self.create_content_image()">
                    <?py
                    element.image["width"] = image_column_width
                    ?>
                </py:new>
            </td>            
            <td py:local_id="padding" width="${self.image_spacing * self.base_spacing}"/>
            <td py:local_id="text_cell">
                <py:new py:element="self.create_content_text()"/>
            </td>
        </tr>
    </table>

    <table
        py:def="image_top_layout"
        cellpadding="0"
        cellspacing="0"
        border="0">
        <tr>
            <td py:id="image_cell">
                <py:new py:element="self.create_content_image()"/>
            </td>
        </tr>
        <tr>
            <td py:id="text_cell">
                <py:new py:element="self.create_content_text()"/>
            </td>
        </tr>
    </table>

</table>
