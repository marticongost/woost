"""Automatic generation of standard filter classes for members.

.. moduleauthor:: Mart√≠ Congost <marti.congost@whads.com>
"""
from typing import Iterable, Mapping, Sequence, Tuple, Type
from threading import Lock

from cocktail.typemapping import TypeMapping
from cocktail import schema
from cocktail.schema import expressions as x
from cocktail.translations import translations

from .filter import Filter
from .memberfilter import MemberFilter

_templates_lock = Lock()
_templates = TypeMapping()

translations.load_bundle("woost.admin.filters.templates")


class FilterTemplate:
    """A class that automates the generation of filter classes for members."""

    def __init__(
            self,
            *,
            base: Type[Filter] = MemberFilter,
            **parameters):

        self.__lock = Lock()
        self.__classes = {}
        self.__base = base
        self.__parameters = parameters

    def base(self) -> Type[Filter]:
        """The base class for the classes generated by the template."""
        return self.__filter

    def parameters(self) -> Mapping:
        """Keyword parameters to supply to the class factory."""
        return self.__parameters

    def __call__(self, member: schema.Member) -> Type[Filter]:
        """Produce a filter class for the given member."""
        try:
            return self.__classes[member]
        except KeyError:
            with self.__lock:
                try:
                    return self.__classes[member]
                except KeyError:
                    cls = self.__base.create_filter_class(
                        member,
                        **self.__parameters
                    )
                    self.__classes[member] = cls
                    return cls

    def get_javascript_declaration(self) -> dict:
        """Produce the client side declaration for this template."""
        return self.__base.get_javascript_declaration(**self.__parameters)


def get_filter_templates(
        member_type: Type[schema.Member],
        inherited: bool = True) -> Iterable[FilterTemplate]:
    """Get the filter templates that apply to the given member type."""

    if inherited:
        for member_type, member_type_templates \
        in _templates.iter_by_type(member_type):
            yield from member_type_templates
    else:
        yield from _templates.get(member_type, ())


def get_filter_templates_by_member_type() -> Iterable[
        Tuple[
            Type[schema.Member],
            Sequence[FilterTemplate]
        ]
    ]:
    """Get all declared filter templates, by member type."""
    return _templates.items()


def add_filter_template(
        member_type: Type[schema.Member], **kwargs) -> FilterTemplate:
    """Add a filter template to the given member type."""

    with _templates_lock:
        try:
            member_templates = _templates[member_type]
        except KeyError:
            member_templates = []
            _templates[member_type] = member_templates

        template = FilterTemplate(**kwargs)
        member_templates.append(template)

    return template


def add_expression_template(
        member_type: Type[schema.Member],
        expression_class: Type[x.Expression],
        **kwargs) -> FilterTemplate:
    """Convenience function to simplify the definition of filter templates
    based on a schema expression.
    """
    return add_filter_template(
        member_type,
        expression_class=expression_class,
        **kwargs
    )


def add_equality_templates(member_type: Type[schema.Member]):
    """Convenience function that adds filter templates for standard equality
    tests.
    """
    add_expression_template(member_type, x.EqualExpression)
    add_expression_template(member_type, x.NotEqualExpression)
    add_expression_template(member_type, x.InclusionExpression, multivalue=True)
    add_expression_template(member_type, x.ExclusionExpression, multivalue=True)


def add_order_templates(member_type: Type[schema.Member]):
    """Convenience function that adds filter templates for standard ordered
    comparison tests.
    """
    add_equality_templates(member_type)
    add_expression_template(member_type, x.GreaterExpression)
    add_expression_template(member_type, x.GreaterEqualExpression)
    add_expression_template(member_type, x.LowerExpression)
    add_expression_template(member_type, x.LowerEqualExpression)


add_equality_templates(schema.Boolean)
add_order_templates(schema.Integer)
add_order_templates(schema.Float)
add_order_templates(schema.Decimal)
add_order_templates(schema.Fraction)
add_order_templates(schema.DateTime)
add_order_templates(schema.Date)
add_order_templates(schema.Time)
add_equality_templates(schema.Reference)

add_order_templates(schema.String)
add_expression_template(schema.String, x.StartsWithExpression)
add_expression_template(schema.String, x.EndsWithExpression)
add_expression_template(schema.String, x.ContainsExpression)
add_expression_template(schema.String, x.MatchExpression)

add_expression_template(schema.Collection, x.ContainsExpression)
add_expression_template(schema.Collection, x.LacksExpression)
add_expression_template(schema.Collection, x.ContainsAnyExpression, multivalue=True)
add_expression_template(schema.Collection, x.ContainsAllExpression, multivalue=True)

