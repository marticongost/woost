<?xml version="1.0" encoding="utf-8"?>

<ui:woost.admin.ui.StackNode
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui">

    <ui:requires component="cocktail.ui.Delay"/>
    <ui:requires component="woost.admin.ui.TranslationsDropdown"/>
    <ui:requires component="woost.admin.ui.SettingsScopeDropdown"/>
    <ui:requires component="woost.admin.ui.FileUploader"/>

    <ui:symbol name="LOCALE_STATES"/>
    <ui:symbol name="EDITED_OBJECT_DELETED"/>

    <ui:property
        name="hasActionList"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="hasNavigationActionList"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="locales"
        reflected="false">
        <?on changed
        this.editForm.locales = newValue;
        ?>
    </ui:property>

    <?class
    invalidation(changes) {
        if (changes.deleted.has(String(this.editedItem.id))) {
            woost.admin.actions.up();
        }
    }

    getActionListContext() {
        return {
            view: this,
            node: this.navigationNode,
            model: this.navigationNode.model,
            item: this.navigationNode.item,
            objectPath: this.navigationNode.objectPath,
            editingTranslatedContent:
                Array
                    .from(this.navigationNode.editSchema.members())
                    .some((member) => member.translated && member.name != "last_translation_update_time"),
            editingSettings: this.navigationNode instanceof woost.admin.nodes.EditSettingsNode,
            editingBlocks: this.navigationNode instanceof woost.admin.nodes.BlocksNode
        };
    }
    ?>

    <?on navigationNode:changed
    if (oldValue && oldValue.item) {
        this.stopObserving(oldValue.item._class.originalMember.invalidation);
    }

    if (newValue && newValue.item) {
        this.observe(newValue.item._class.originalMember.invalidation);
    }

    if (!oldValue) {
        let selection = [newValue.item];
        let localeStates = this[LOCALE_STATES];

        if (newValue.item._deleted_translations) {
            for (let locale of newValue.item._deleted_translations) {
                localeStates.set(locale, "deleted");
            }
        }

        for (let locale of cocktail.schema.getLocales(newValue.item, newValue.model)) {
            if (!localeStates.get(locale)) {
                localeStates.set(locale, "visible");
            }
        }

        for (let locale of cocktail.ui.locales) {
            if (!localeStates.get(locale)) {
                localeStates.set(locale, "undefined");
            }
        }

        const actionListContext = this.getActionListContext();

        if (this.hasActionList) {
            this.actionList.actionParameters.selection = selection;
            this.actionList.actions = Array.from(woost.admin.actions.forContext(
                Object.assign({slot: "editToolbar"}, actionListContext)
            ));
        }

        if (this.hasNavigationActionList) {
            this.navigationActionList.actionParameters.selection = selection;
            this.navigationActionList.actions = Array.from(woost.admin.actions.forContext(
                Object.assign({slot: "editNavigationToolbar"}, actionListContext)
            ));
        }

        if (newValue instanceof woost.admin.nodes.EditSettingsNode) {
            this.editForm.tabbed = false;
            this.editForm.grouped = false;
        }

        this.editForm.locales = this.visibleLocales;
        this.editForm.dataBinding = {
            member: newValue.editSchema,
            value: newValue.item
        };

        this.addEventListener(
            "nodeExposed",
            () => {
                this.editForm.awaitFields().then(() => {
                    this.editForm.focusDefaultControl(
                        this.editForm.tabbed ? this.editForm.tabs.selectedTab && this.editForm.tabs.selectedTab.tabId : null
                    );
                });
            },
            {once: true}
        );
    }
    ?>

    <?on nodeExposed
    if (this.editForm.tabbed) {
        this.editForm.tabs.updatesQuery = true;
    }
    ?>

    <?on nodeCovered
    if (this.editForm.tabbed) {
        this.editForm.tabs.updatesQuery = false;
    }
    ?>

    <?class
    disconnectedCallback() {
        super.disconnectedCallback();
        woost.admin.editState.clear(this.editedItem);
    }

    get editedItem() {
        return this.navigationNode.item;
    }

    get visibleLocales() {
        return new Set(this.localesInState("visible"));
    }

    get hiddenLocales() {
        return new Set(this.localesInState("hidden"));
    }

    get definedLocales() {
        let definedLocales = new Set();
        for (let [locale, localeState] of this[LOCALE_STATES]) {
            if (localeState != "undefined" && localeState != "deleted") {
                definedLocales.add(locale);
            }
        }
        return definedLocales;
    }

    get undefinedLocales() {
        return new Set(this.localesInState("undefined"));
    }

    get deletedLocales() {
        return new Set(this.localesInState("deleted"));
    }

    *localesInState(searchedState) {
        for (let [locale, localeState] of this[LOCALE_STATES]) {
            if (localeState == searchedState) {
                yield locale;
            }
        }
    }

    get localeStates() {
        return Object.freeze(this[LOCALE_STATES]);
    }

    getLocaleState(locale) {
        return this[LOCALE_STATES].get(locale);
    }

    setLocaleState(locale, newState) {
        let previousState = this[LOCALE_STATES].get(locale);
        if (previousState != newState) {
            this[LOCALE_STATES].set(locale, newState);
            const deletedTranslations = this.editForm.value._deleted_translations;
            if (previousState == "deleted") {
                deletedTranslations.splice(deletedTranslations.indexOf(locale), 1);
            }
            else if (newState == "deleted") {
                deletedTranslations.push(locale);
            }
            this.editForm.locales = this.visibleLocales;
            cocktail.ui.trigger(this, "localeChanged", {locale, previousState, newState});
        }
    }
    ?>

    <?on isStackRoot:changed
    this.navigationActionList.updateEntries();
    ?>

    <?js
    this[LOCALE_STATES] = new Map();
    ?>

    <ui:with ui:element="headerContent">
        <ui:cocktail.ui.ActionList id="actionList" buttonStyle="iconAboveText"/>
        <ui:cocktail.ui.ActionList id="navigationActionList" buttonStyle="iconAboveText"/>
    </ui:with>

    <ui:with ui:element="main">
        <ui:EditForm id="editForm"/>
    </ui:with>

    <ui:cocktail.ui.Form
        ui:component="EditForm"
        tabbed="true"
        defaultGroup="item">

        <ui:symbol name="PREVIOUS_STATE"/>
        <ui:symbol name="UPDATE_DELAY"/>

        <?js
        this[UPDATE_DELAY] = new cocktail.ui.Delay(150, () => {
            const oldValue = this[PREVIOUS_STATE];
            delete this[PREVIOUS_STATE];
            cocktail.ui.request({
                url: woost.admin.url + "/data/values",
                method: "POST",
                data: {objects: [this.getJSONValue()]},
                responseType: "json"
            })
                .then((xhr) => {
                    const newValue = cocktail.schema.objectFromJSONValue(xhr.response.objects[0]);
                    this.parentInstance.headingElement.firstChild.value = newValue;
                    cocktail.ui.trigger(this.parentInstance, "newEditState", {oldValue, newValue});
                });
        });
        ?>

        <?class
        shouldAddField(member) {
            return super.shouldAddField(member) && !member[woost.admin.ui.hiddenInEditView];
        }
        ?>

        <?on value:changed
        woost.admin.editState.set(newValue);

        if (this.fieldsReady) {
            if (!this[PREVIOUS_STATE]) {
                this[PREVIOUS_STATE] = oldValue;
            }
            this[UPDATE_DELAY].begin();
        }
        ?>

        <?js
        element.displayFactory = woost.admin.ui.formControls;
        element.tabs.updatesQuery = false;
        element.tabs.queryParameter = "tab";
        ?>

    </ui:cocktail.ui.Form>

</ui:woost.admin.ui.StackNode>

