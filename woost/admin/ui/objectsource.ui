<?xml version="1.0" encoding="utf-8"?>

<ui:mixin
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui"
    draggable="true">

    <ui:symbol name="EXPANDED_INSTANCE"/>
    <ui:symbol name="CONTEXT_MENU"/>

    <ui:property
        name="contextMenuEnabled"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="contextMenuExpanded"
        type="boolean"
        reflected="true"
        default="false"/>

    <?tail
    window.addEventListener("click", (e) => {
        if (mixin[EXPANDED_INSTANCE]) {
            mixin[EXPANDED_INSTANCE].contextMenuExpanded = false;
        }
    }, true);
    ?>

    <?class
    resolveObjectSourceEvent(e) {
        let target = this.resolveObjectSourceTarget(e);
        if (target) {
            return {
                target: target,
                model: target.dataBinding.member.relatedType,
                item: target.value,
                referrer: target.dataBinding.object,
                relation: target.dataBinding.member,
                position: this.resolveObjectSourceMousePosition(e)
            };
        }
        else {
            return null;
        }
    }

    resolveObjectSourceTarget(e) {
        return this;
    }

    resolveObjectSourceMousePosition(e) {
        let position;
        if (e.button) {
            const rect = this.getBoundingClientRect();
            position = {x: e.pageX - rect.left, y: e.pageY - rect.top};
        }
        return position;
    }

    expandContextMenu(objectSource) {

        // Don't create the menu until it is expanded for the first time
        if (mixin[EXPANDED_INSTANCE]) {
            mixin[EXPANDED_INSTANCE].contextMenuExpanded = false;
        }

        let menu = this[CONTEXT_MENU];
        if (!menu) {
            menu = mixin.ContextMenu.create();
            this[CONTEXT_MENU] = menu;
            this.shadowRoot.appendChild(menu);
        }

        menu.actionList.actionContext.model = objectSource.model;
        menu.actionList.actionContext.selection = [objectSource.item];
        menu.actionList.actionContext.objectPath = objectSource.target.objectPath;
        menu.actionSetup();

        if (objectSource.position) {
            menu.style.left = objectSource.position.x + "px";
            menu.style.top = objectSource.position.y + "px";
        }
        else {
            menu.style.left = "0";
            menu.style.top = "100%";
        }

        setTimeout(() => {
            this.contextMenuExpanded = true;
            mixin[EXPANDED_INSTANCE] = this;
        }, 100);
    }

    hideContextMenu() {
        if (mixin[EXPANDED_INSTANCE] === this) {
            mixin[EXPANDED_INSTANCE] = null;
        }
        this.contextMenuExpanded = false;
    }
    ?>

    <?on dragstart
    const resolution = this.resolveObjectSourceEvent(e);
    if (resolution) {
        const model = resolution.model.originalMember;
        const objectState = model.toJSONValue(
            resolution.item,
            {
                expandReferences: true,
                getMemberParameters: function (member) { return this; }
            }
        );
        e.dataTransfer.setDragImage(resolution.target, 5, 5);
        e.dataTransfer.setData("application/x-woost-object", JSON.stringify({
            model: model.fullName,
            item: objectState,
            referrer: resolution.referrer,
            relation: resolution.relation.originalMember.fullName,
            position: resolution.position
        }));
    }
    ?>

    <?on contextmenu
    if (this.contextMenuEnabled) {
        const resolution = this.resolveObjectSourceEvent(e);
        if (resolution) {
            this.expandContextMenu(resolution);
            e.preventDefault();
            e.stopPropagation();
        }
    }
    ?>

    <div ui:component="ContextMenu">
        <div id="panel">
            <ui:cocktail.ui.ActionList id="actionList">
                <?js
                element.classList.add("vertical");
                element.actionContext = {
                    view: this,
                    slot: "context-menu"
                };
                element.actionSource = woost.admin.actions.contextMenu;
                ?>
                <?on click
                instance.parentInstance.hideContextMenu();
                e.stopPropagation();
                ?>
            </ui:cocktail.ui.ActionList>
        </div>
    </div>

</ui:mixin>

