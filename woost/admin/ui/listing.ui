<?xml version="1.0" encoding="utf-8"?>

<ui:woost.admin.ui.StackNode
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui">

    <ui:requires component="cocktail.ui.delay"/>
    <ui:requires component="woost.admin.ui.ViewSelector"/>
    <ui:requires component="woost.admin.ui.PartitioningMethodSelector"/>
    <ui:requires component="woost.admin.ui.FieldsDropdown"/>
    <ui:requires component="woost.admin.ui.LocalesDropdown"/>
    <ui:requires component="woost.admin.ui.FiltersDropdown"/>

    <ui:requires-translation-bundle name="woost.admin.filters.templates"/>
    <ui:symbol name="NAVIGATING"/>
    <ui:symbol name="UPDATE"/>
    <ui:symbol name="UPDATED_AT_LEAST_ONCE"/>
    <ui:symbol name="FILTERS_DELAY"/>

    <?class
    [UPDATE](previousNode = null) {

        let node = this.navigationNode;
        this.actionList.actionContext.node = node;
        this.members = node.members;
        this.locales = node.locales;
        this.partition = node.partition;
        this.order = node.order;
        this.search = node.search;
        this.relation = node.relation;
        this.relationOwner = node.item;

        if (!this.model || this.model.name != node.adaptedModel.name) {
            this.model = node.adaptedModel;
        }

        this.filters = node.filters;

        const prevView = this.view;
        const newView = this.navigationNode.view;
        this.view = newView;
        const currentComponent = prevView && prevView.ui_component;
        const newComponent = newView && newView.ui_component;

        if (newComponent !== currentComponent) {

            if (this.viewDisplay) {
                this.viewDisplay.parentNode.removeChild(this.viewDisplay);
            }

            if (newComponent) {
                this.viewDisplay = newComponent.create();
                this.viewContainer.appendChild(this.viewDisplay);
                this.viewDisplay.listing = this;
            }
        }

        if (!previousNode || previousNode.queryString != node.queryString) {
            this[UPDATED_AT_LEAST_ONCE] = true;
            cocktail.ui.trigger(this.viewDisplay, "listingReset");
        }
    }

    getDefaultControl() {
        const entry = this.actionList.getEntry("controls.search");
        if (entry) {
            return entry.input;
        }
    }

    focusDefaultControl() {
        const control = this.getDefaultControl();
        if (control) {
            cocktail.ui.focus(control);
        }
    }
    ?>

    <?on navigationNode:changed
    this[NAVIGATING] = true;
    try {
        if (newValue === cocktail.navigation.node) {
            this[UPDATE](oldValue);
        }
    }
    finally {
        this[NAVIGATING] = false;
    }
    ?>

    <ui:property
        name="view"
        type="new woost.admin.views.ViewReference()"
        reflected="true">
        <?on changed
        this.countEnabled = !newValue || newValue.count_enabled;

        if (!this[NAVIGATING] && oldValue !== undefined) {

            const params = {view: newValue || undefined};

            if (
                newValue && (
                    !newValue.allows_partitioning
                    || (
                        this.partition
                        && newValue.partitioning_methods
                        && newValue.partitioning_methods.length
                        && !newValue.partitioning_methods.includes(this.partition.method.name)
                    )
                )
            ) {
                params["partition"] = undefined;
            }

            if (newValue && !newValue.allows_sorting) {
                params["order"] = undefined;
            }

            cocktail.navigation.changeQuery(params);
        }
        ?>
    </ui:property>

    <ui:property
        name="partition"
        type="new woost.admin.partitioning.PartitionSpecifier()"
        reflected="true">
        <?on changed
        if (!this[NAVIGATING] && oldValue !== undefined) {
            cocktail.navigation.changeQuery({partition: newValue || ""});
        }
        ?>
    </ui:property>

    <ui:property
        name="countEnabled"
        type="boolean"
        default="true"
        reflected="true"/>

    <ui:property
        name="selectable"
        reflected="false">
        <?on changed
        this.actionList.selectable = newValue;

        if (newValue) {

            // Default action
            newValue.addEventListener("selectionActivated", (e) => {
                if (this.defaultAction && this.defaultActionList) {
                    const context = this.defaultActionList.getActionContext();
                    for (let actionName of this.defaultAction.split(" ")) {
                        const entry = this.defaultActionList.getEntry(actionName);
                        if (entry && entry.actionSource.getState(context) == "visible") {
                            entry.actionSource.invoke(context);
                            break;
                        }
                    }
                }
            });

            // Pressing the Up key at the top of the selectable goes back to the search box
            newValue.addEventListener("keyboardSelectionOverflow", (e) => {
                if (e.detail.direction == "up") {
                    this.focusDefaultControl();
                }
            });
        }
        ?>
    </ui:property>

    <ui:property
        name="model"
        reflected="false">
        <?on changed
        this.actionList.actionContext.model = newValue;
        this.actionList.actionSetup();
        ?>
    </ui:property>

    <ui:property
        name="relation"
        reflected="false"/>

    <ui:property
        name="relationOwner"
        reflected="false"/>

    <ui:property
        name="members"
        reflected="false">
        <?on changed
        if (!this[NAVIGATING] && oldValue !== undefined) {
            cocktail.navigation.changeQuery({members: newValue});
        }
        ?>
    </ui:property>

    <ui:property
        name="locales"
        reflected="false">
        <?on changed
        if (!this[NAVIGATING] && oldValue !== undefined) {
            cocktail.navigation.changeQuery({locales: newValue});
        }
        ?>
    </ui:property>

    <ui:property
        name="search"
        type="string"
        reflected="false">
        <?on changed
        if (!this[NAVIGATING] && oldValue !== undefined) {
            cocktail.navigation.changeQuery({search: newValue || undefined});
        }
        ?>
    </ui:property>

    <ui:property
        name="filters"
        reflected="false">
        <?on changed
        if (!this[NAVIGATING] && oldValue !== undefined) {
            this[FILTERS_DELAY].begin();
        }
        ?>
    </ui:property>

    <ui:property
        name="order"
        type="string"
        reflected="false">
        <?on changed
        if (!this[NAVIGATING] && oldValue !== undefined) {
            cocktail.navigation.changeQuery({order: newValue || undefined});
        }
        ?>
    </ui:property>

    <ui:property
        name="empty"
        type="boolean"
        reflected="true"/>

    <ui:property
        name="defaultAction"
        type="string"
        reflected="true"
        default="main.edit"/>

    <ui:property
        name="resultCount"
        reflected="false">
        <?on changed
        this.partitionTabs.resultCount = newValue;
        ?>
    </ui:property>

    <?class
    addFilter(filter, filterValues = null, edit = false) {

        if (typeof(filter) == "string") {
            filter = woost.admin.filters.getFilter(this.model, filter);
        }

        if (!filterValues) {
            filterValues = filter.defaults();
        }

        if (edit) {
            this.filtersBar.addEventListener(
                "entryAdded",
                (e) => e.detail.entry.entryForm.awaitFields().then(
                    () => e.detail.entry.entryForm.focusDefaultControl()
                ),
                {once: true}
            );
        }

        let filters = [...this.filters, {member: filter, value: filterValues}];
        return cocktail.navigation.node.updateQueryStringWithFilters(filters);
    }
    ?>

    <ui:with ui:element="headerContent">

        <ui:cocktail.ui.ActionList
            id="actionList"
            buttonStyle="iconAboveText">
            <?js
            element.actionContext = {
                view: this,
                slot: "listing-toolbar"
            };
            element.actionSource = woost.admin.actions.listingToolbar;
            ?>
        </ui:cocktail.ui.ActionList>

    </ui:with>

    <ui:with ui:element="main">

        <ui:woost.admin.ui.FiltersBar id="filtersBar"/>

        <ui:woost.admin.ui.PartitionTabs id="partitionTabs">
            <?js
            cocktail.ui.link(
                this,
                element,
                ["partition", "value"]
            );
            ?>
        </ui:woost.admin.ui.PartitionTabs>

        <div id="viewContainer"/>

    </ui:with>

    <?on nodeExposed
    if (!this[UPDATED_AT_LEAST_ONCE]) {
        this[UPDATE]();
    }
    this.focusDefaultControl();
    ?>

    <?js
    this[FILTERS_DELAY] = new cocktail.ui.Delay(
        400,
        () => cocktail.navigation.node.updateQueryStringWithFilters(this.filters)
    );
    cocktail.ui.link(this, this.filtersBar, "filters");
    this.defaultActionList = this.actionList;
    ?>

    <ui:cocktail.ui.ActionListEntry ui:component="SearchBox">

        <ui:cocktail.ui.SearchInput
            id="input"
            inputDelay="400"/>

        <?class
        static get requiresShadowDOM() {
            return false;
        }

        actionSetup() {
            super.actionSetup();
            const context = this.getActionContext();
            this.input.dataBinding = {
                member: context.node.queryParameters.search,
                value: context.node.search
            };
            cocktail.ui.link(
                context.view,
                this.input,
                ["search", "value"],
                null, null, false
            );
        }
        ?>

        <?on keydown
        const context = this.getActionContext();
        if (e.which == cocktail.ui.keys.DOWN && context.selectable) {
            if (!context.selectable.selectedElements.size) {
                let first = context.selectable.getFirstSelectableElement();
                if (first) {
                    context.selectable.selectedElements = [first];
                }
            }
            cocktail.ui.focus(context.view.viewDisplay);
            e.preventDefault();
            e.stopPropagation();
        }
        ?>

    </ui:cocktail.ui.ActionListEntry>

    <ui:cocktail.ui.ActionListEntry ui:component="ResultCount">

        <ui:symbol name="DISCONNECT_LISTENER"/>

        <?class
        static get requiresShadowDOM() {
            return false;
        }

        actionSetup() {
            super.actionSetup();
            const view = this.getActionContext().view;
            const listener = view.addEventListener("resultCountChanged", (e) => {
                this.resultCountLabel.innerHTML = e.detail.newValue && e.detail.newValue.label || "";
            });
            this[DISCONNECT_LISTENER] = () => view.removeEventListener("resultCountChanged", listener);
        }

        disconnectedCallback() {
            this[DISCONNECT_LISTENER]();
            delete this[DISCONNECT_LISTENER]
        }
        ?>

        <div id="resultCountLabel"/>

    </ui:cocktail.ui.ActionListEntry>

</ui:woost.admin.ui.StackNode>

