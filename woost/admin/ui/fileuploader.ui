<?xml version="1.0" encoding="utf-8"?>

<ui:element
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui">

    <ui:symbol name="UPLOAD_TEMP_FILE"/>

    <ui:using mixin="cocktail.ui.DataDisplay"/>

    <ui:property
        name="uploadState"
        type="string"
        reflected="true"
        default="idle"/>

    <ui:property
        name="empty"
        type="boolean"
        reflected="true"
        default="true"/>

    <?class
    [UPLOAD_TEMP_FILE](file) {
       this.uploadState = "uploading";

        woost.admin.actions.attempt(
            cocktail.ui.request({
                url: "/async_upload",
                method: "POST",
                headers: {
                    "Content-Type": "application/octet-stream",
                    "X-File-Name": file.name
                },
                data: file,
                progressBar:this.progressBar,
                responseType: "json"
            })
                .then((xhr) => {
                    this.value = xhr.response.id;
                    this.fileNameLabel.innerText = xhr.response.name;
                    this.fileSizeLabel.innerText = xhr.response.size_desc;
                    this.empty = false;
                }),
            {
                getErrorNotice(e) {
                    let key;
                    if (e.xhr && e.xhr.status == 413) {
                        key = ".fileTooLargeErrorNotice";
                    }
                    else {
                        key = ".errorNotice";
                    }
                    return {
                        category: "error",
                        summary: cocktail.ui.translations[cls.fullName + ".errorNotice"]
                    };
                }
            }
        )
            .finally(() => {
                this.uploadState = "idle";
            });
    }
    ?>

    <?on dataBinding:changed
    const file = this.dataBinding.parent && this.dataBinding.parent.value;
    const fileName = file && file.file_name;

    if (fileName) {
        this.fileNameLabel.innerText = fileName;
        this.fileSizeLabel.innerText = file._size_label;
        this.empty = false;
    }
    else {
        this.fileNameLabel.innerText = "";
        this.fileSizeLabel.innerText = "";
        this.empty = true;
    }
    ?>

    <?tail
    cls.UploadFileAction = class UploadFileAction extends woost.admin.actions.Action {
        invoke(context) {
            context.fileUploader.fileInput.click();
        }
    }

    cls.toolbar = new cocktail.ui.ActionSet("file-uploader-toolbar", {
        entries: [
            new cls.UploadFileAction("upload")
        ]
    });

    window.addEventListener("DOMContentLoaded", () => {
        document.addEventListener("dragover", e => {
            e.preventDefault();
            document.documentElement.classList.add("woost-admin-ui-FileUploader-droppingFile");
        });
        document.addEventListener("dragleave", () => {
            document.documentElement.classList.remove("woost-admin-ui-FileUploader-droppingFile");
        });
    });
    ?>

    <div id="uploadInfo">
        <div id="fileNameLabel"/>
        <div id="fileSizeLabel"/>
    </div>

    <div id="dropArea">
        <ui:translation/>

        <?on dragover
        e.preventDefault();
        this.classList.add("dropArea--highlight")
        ?>

        <?on dragleave
        e.preventDefault();
        this.classList.remove("dropArea--highlight")
        ?>

        <?on drop
        e.preventDefault();
        instance[UPLOAD_TEMP_FILE](e.dataTransfer.items[0].getAsFile())
        document.documentElement.classList.remove("woost-admin-ui-FileUploader-droppingFile");
        this.classList.remove("dropArea--highlight")
        ?>
    </div>

    <ui:cocktail.ui.ActionList id="actionList">
        <?js
        element.classList.add("compact");
        element.classList.add("without-frame");
        element.actionContext.fileUploader = instance;
        element.actionSource = cls.toolbar;
        element.actionSetup();
        ?>
    </ui:cocktail.ui.ActionList>

    <ui:cocktail.ui.ProgressBar id="progressBar"/>

    <input
        id="fileInput"
        type="file">

        <?on change
        instance[UPLOAD_TEMP_FILE](this.files[0]);
        ?>

    </input>

</ui:element>

