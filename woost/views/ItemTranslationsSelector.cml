<?xml version="1.0" encoding="utf-8"?>
<?py
from woost.models import (
    Configuration,
    CreateTranslationPermission,
    DeleteTranslationPermission,
    get_current_user
)
?>

<py:cocktail.html.SearchableCheckList
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    available_languages = None
    item_translations = None
    visible_translations = None
    name = "visible_translations"

    def _can_add_translation(self, language):
        return get_current_user().has_permission(
            CreateTranslationPermission,
            language = language
        )

    def _can_delete_translation(self, language):
        return get_current_user().has_permission(
            DeleteTranslationPermission,
            language = language
        )

    def _ready(self):

        if self.available_languages is None:
            self.available_languages = Configuration.instance.languages

        SearchableCheckList._ready(self)

    def _get_available_languages(self):
        return self.items

    def _set_available_languages(self, languages):
        self.items = languages

    available_languages = property(
        _get_available_languages,
        _set_available_languages
    )

    def _get_visible_translations(self):
        return self.value

    def _set_visible_translations(self, languages):
        self.value = languages

    visible_translations = property(
        _get_visible_translations,
        _set_visible_translations
    )
    ?>

    <?py
    self.add_resource("/resources/scripts/ItemTranslationsSelector.js")
    ?>

    <py:with py:element="self.check_list">

        <?py
        @extend(element)
        def get_item_label(self, item):
            return translations("locale", locale = item)

        @extend(element)
        def get_item_value(self, item):
            return item
        ?>

        <py:with py:def="entry" py:args="value, label, selected">
            <?py
            element["data-locale"] = value

            if value in self.item_translations:
                element.add_class("defined_translation")
                if self._can_delete_translation(value):
                    element.delete_translation_button = self.create_delete_translation_button(value)
                    element.append(element.delete_translation_button)
            else:
                element.add_class("undefined_translation")
                element.check.visible = False
                if self._can_add_translation(value):
                    element.add_translation_button = self.create_add_translation_button(value)
                    element.append(element.add_translation_button)
            ?>        
        </py:with>

    </py:with>

    <div py:id="defined_translations_filter" py:after="self.search_box">
        <py:binding>
            <?py
            element.label["for"] = element.checkbox.require_id()
            ?>
        </py:binding>
        <input py:local_id="checkbox" type="checkbox"/>
        <label
            py:local_id="label" 
            accesskey="${translations('woost.views.ItemTranslationsSelector.defined_translations_filter.shortcut')}">
            ${translations("woost.views.ItemTranslationsSelector.defined_translations_filter")}
        </label>
    </div>

    <button
        py:def="add_translation_button" py:args="language"
        type="submit"
        name="add_translation"
        value="${language}">
        <?py
        label = translations("woost.views.ItemTranslationsSelector.add_translation_button")
        ?>
        <img
            py:local_id="icon"
            src="/resources/images/add.png"
            alt="${label}"
            title="${label}"/>
    </button>

    <button
        py:def="delete_translation_button" py:args="language"
        type="submit"
        name="delete_translation"
        value="${language}">
        <?py
        label = translations("woost.views.ItemTranslationsSelector.delete_translation_button")
        ?>
        <img
            py:local_id="icon"
            src="/resources/images/delete.png"
            alt="${label}"
            title="${label}"/>
    </button>

    <button
        py:id="revert_button"
        py:client_model="woost.views.ItemTranslationsSelector.revert_button"
        type="button">
        <?py
        label = translations("woost.views.ItemTranslationsSelector.revert_button")
        ?>
        <img
            py:local_id="icon"
            src="/resources/images/revert.png"
            alt="${label}"
            title="${label}"/>
    </button>

</py:cocktail.html.SearchableCheckList>

