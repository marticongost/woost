<?xml version="1.0" encoding="utf-8"?>
<?py
from cocktail.stringutils import normalize
from cocktail.translations import DATE_STYLE_TEXT
from cocktail.html.uigeneration import UIGenerator
from woost.models import ChangeSet, Change
from woost.views.uigeneration import backoffice_display
?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates"
    py:mixins="UIGenerator">

    <?py-class
    items = None
    changes = None
    changesets = None
    base_ui_generators = [backoffice_display]
    show_all_changes = True

    action_order = {
        "create": 1,
        "modify": 2,
        "delete": 3
    }

    def create_member_display(self, obj, member, value, **context):
        context.setdefault("icon_visible", False)
        return UIGenerator.create_member_display(self, obj, member, value, **context)
    ?>

    <?py
    self.add_resource("/resources/styles/ChangeLog.css")
    ?>

    <py:ready>
        <?py
        if self.changes is None and self.items:
            self.changes = []
            for item in self.items:
                self.changes.extend(item.changes)

        if self.changesets is None and self.changes:
            changesets = set()
            changesets.update(change.changeset for change in self.changes)
            self.changesets = list(changesets)
            self.changesets.sort(key = lambda changeset: changeset.date)
        ?>
    </py:ready>

    <ul py:id="changelog_entries">
        <py:ready>
            <?py
            changeset_group = None
            current_date = None
            for changeset in self.changesets:
                changeset_date = changeset.date.date()
                if changeset_group is None or changeset_date != current_date:
                    changeset_group = self.create_changeset_group(changeset_date)
                    current_date = changeset_date
                    element.append(changeset_group)
                changeset_group.changeset_list.append(self.create_changeset_list_entry(changeset))
            ?>
        </py:ready>
    </ul>

    <li py:def="changeset_group" py:args="date">
        <div py:local_id="changeset_group_heading">
            ${translations(date, style = DATE_STYLE_TEXT)}
        </div>
        <ul py:local_id="changeset_list"/>
    </li>

    <li py:def="changeset_list_entry" py:args="changeset">
        <div py:local_id="changeset_info">
            <div py:local_id="changeset_time_display">
                ${translations(changeset.date.time(), include_seconds = False)}
            </div>
            <py:new
                py:local_id="changeset_author_display"
                py:element="self.create_member_display(changeset, ChangeSet.author, changeset.author)"/>
        </div>
        <py:new
            py:element="self.create_change_list(changeset)"
            py:local_id="change_list"/>
    </li>

    <ul py:def="change_list" py:args="changeset">
        <?py
        changes = changeset.changes.values()
        if not self.show_all_changes and self.changes:
            changes = filter(self.changes.__contains__, changes)
        changes.sort(key = lambda change: (
            0 if change.is_explicit_change else 1,
            self.action_order.get(change.action),
            normalize(translations(change.target))
        ))
        ?>
        <py:new
            py:element="self.create_change_list_entry(change)"
            py:for="change in changes"/>
    </ul>

    <li py:def="change_list_entry" py:args="change">
        <?py
        element["data-woost-ChangeLog-action"] = change.action
        element["data-woost-ChangeLog-explicit"] = "true" if change.is_explicit_change else "false"
        ?>
        <py:new
            py:local_id="change_action_display"
            py:element="self.create_member_display(change, Change.action, change.action)"/>
        <py:new
            py:local_id="change_target_display"
            py:element="self.create_member_display(change, Change.target, change.target)"/>

        <?py
        state_changes = None
        if change.action == "modify":
            previous_change = change.get_previous_change()
            if previous_change is not None:
                state_changes = change.diff(previous_change)
        ?>

        <py:woost.views.ObjectDiff
            py:if="state_changes"
            py:local_id="change_diff"
            py:source="${previous_change.item_state}"
            py:target="${change.item_state}"
            py:changes="${state_changes}"/>
    </li>

</div>

